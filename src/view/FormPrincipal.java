/**
 * Leonardo Feriato Moreira - Setembro 2017
 */
package view;

import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.net.URI;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import util.*;

public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Variáveis Globais
     */
    private int linhaSelecionada = -1; //Linha selecionada na tabela
    private DenavitHartenberg dh; //Instanciando
    
    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        configuracoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnSistDH = new javax.swing.JPanel();
        scScrollPane = new javax.swing.JScrollPane();
        tabDH = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        pnSolution = new javax.swing.JPanel();
        scScrollPane_2 = new javax.swing.JScrollPane();
        tabSolution = new javax.swing.JTable();
        lblSolucao = new javax.swing.JLabel();
        cbIndex = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabCoord = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();
        menuVersao = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnSistDH.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Sistemática de Denavit-Hartenberg"));

        tabDH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabDH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabDHMouseClicked(evt);
            }
        });
        tabDH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabDHKeyPressed(evt);
            }
        });
        scScrollPane.setViewportView(tabDH);

        jButton3.setText("Apagar Selecionada");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Adicionar Linha");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Limpar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Calcular");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSistDHLayout = new javax.swing.GroupLayout(pnSistDH);
        pnSistDH.setLayout(pnSistDHLayout);
        pnSistDHLayout.setHorizontalGroup(
            pnSistDHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSistDHLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSistDHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSistDHLayout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        pnSistDHLayout.setVerticalGroup(
            pnSistDHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSistDHLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnSistDHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnSolution.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Transformadas Homogêneas"));

        tabSolution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scScrollPane_2.setViewportView(tabSolution);

        lblSolucao.setText("Solução do Elo:");

        cbIndex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbIndex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbIndexItemStateChanged(evt);
            }
        });

        tabCoord.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabCoord);

        jLabel1.setText("Posição final da garra:");

        javax.swing.GroupLayout pnSolutionLayout = new javax.swing.GroupLayout(pnSolution);
        pnSolution.setLayout(pnSolutionLayout);
        pnSolutionLayout.setHorizontalGroup(
            pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSolutionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scScrollPane_2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSolutionLayout.createSequentialGroup()
                        .addComponent(lblSolucao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSolutionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnSolutionLayout.setVerticalGroup(
            pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSolutionLayout.createSequentialGroup()
                .addComponent(scScrollPane_2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSolucao))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuArquivo.setText("Arquivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem1.setText("Limpar Tudo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArquivo.add(jMenuItem1);

        menuBar.add(menuArquivo);

        menuSobre.setText("Sobre");

        menuVersao.setText("Versão 1.0 (Set/2017)");
        menuVersao.setEnabled(false);
        menuVersao.setRequestFocusEnabled(false);
        menuSobre.add(menuVersao);

        jMenuItem2.setText("GitHub");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuSobre.add(jMenuItem2);

        menuBar.add(menuSobre);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnSolution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnSistDH, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnSistDH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /**
         * Adicionando nova linha na tabela
         */
        
        //Chama a tabela já configurada
        DefaultTableModel t = (DefaultTableModel) tabDH.getModel();
        
        //Adiciona uma nova linha
        t.addRow(new Object[]{0, 0, 0, 0, 0});
        
        buttonControl(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        /**
         * Apagando linha selecionada na tabela
         */
        deleteRow(tabDH);  
        buttonControl(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tabDHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabDHMouseClicked
        //Retornar qual linha da tabela foi selecionada pelo usuário
        linhaSelecionada = tabDH.getSelectedRow();
        
        //Ajustando botões
        buttonControl(false);
    }//GEN-LAST:event_tabDHMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /**
         * Construindo uma nova tabela
         */
        configTableSys(tabDH, scScrollPane);
        buttonControl(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Inciando a classe
        dh = new DenavitHartenberg();
        
        //Executando os cálculos
        dh.run(tabDH);
        
        //Se não houve nenhum erro
        if(!dh.isError()){
            //Habilita os botões
            buttonControl(true);
            
            //Exibindo na tabela o resultado final
            tabSolution.setModel(dh.getTableModelOf(dh.size()-1));
            
            //Exibindo os valores de X, Y e Z
            DefaultTableModel model = (DefaultTableModel)tabCoord.getModel();

            model.setValueAt(tabSolution.getValueAt(0, 3), 0, 1); //X
            model.setValueAt(tabSolution.getValueAt(1, 3), 1, 1); //Y
            model.setValueAt(tabSolution.getValueAt(2, 3), 2, 1); //Z
            
            //Adicionando os elementos na ComboBox
            configCombo(cbIndex, tabDH.getRowCount());
            
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    String.format("Certifique-se de ter inserido "
                  + "\n apenas números Reais."), "Oops...",//Titulo
                    JOptionPane.WARNING_MESSAGE, null);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tabDHKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabDHKeyPressed
        /**
         * Verificando se a tecla pressionada é Delete
         */
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            deleteRow(tabDH); 
        }
    }//GEN-LAST:event_tabDHKeyPressed

    private void cbIndexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbIndexItemStateChanged
        /**
         * Muda qual a tabela a ser exibida utilizando o valor do index
         */
        
        if (cbIndex.getSelectedIndex() == tabDH.getRowCount() + 1) { //Se o item selecionado for a linha hipotética da solução
            tabSolution.setModel(dh.getTableModelOf(dh.size() - 1));
        } else {
            tabSolution.setModel(dh.getTableModelOf(cbIndex.getSelectedIndex()));
        }
    }//GEN-LAST:event_cbIndexItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Zerando a aplicação
        
        //Configurando a Tabela do Sistema
        configTableSys(tabDH, scScrollPane);
        configTableSol(tabSolution);
        configTableRes(tabCoord);
        
        //Configurando ComboBox
        configCombo(cbIndex, 0);
        
        //Controle dos botões
        buttonControl(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Abrir GitHub
        try {
            Desktop desktop = java.awt.Desktop.getDesktop();
            URI oURL = new URI("https://github.com/LeonardoFeriato");
            desktop.browse(oURL);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbIndex;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSolucao;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuSobre;
    private javax.swing.JMenuItem menuVersao;
    private javax.swing.JPanel pnSistDH;
    private javax.swing.JPanel pnSolution;
    private javax.swing.JScrollPane scScrollPane;
    private javax.swing.JScrollPane scScrollPane_2;
    private javax.swing.JTable tabCoord;
    private javax.swing.JTable tabDH;
    private javax.swing.JTable tabSolution;
    // End of variables declaration//GEN-END:variables

    private void configuracoes() {
       
        //Título do formulário
        this.setTitle("Cálculo de Denavit-Hartenberg");
        
        //Centralizando formulário
        this.setLocationRelativeTo(null);
        
        //Impedindo maximização
        this.setResizable(false);
        
        //Configurando a Tabela do Sistema
        configTableSys(tabDH, scScrollPane);
        configTableSol(tabSolution);
        configTableRes(tabCoord);
        
        //Configurando ComboBox
        configCombo(cbIndex, 0);
        
        //Controle dos botões
        buttonControl(false);
        
        
    }
    
    /**
     * Configurando a Tabela Sintática
     */
    private void configTableSys(JTable tabTable, JScrollPane spScrollPane) {
        DefaultTableModel m = new DefaultTableModel();
        
        //Colunas
        m.addColumn("a");
        m.addColumn("α(alfa)");
        m.addColumn("d");
        m.addColumn("θ(teta)");
        
        //Populando a tabela
        for (int i = 0; i < 7; i++) {
            m.addRow(new Object[]{0, 0, 0, 0, 0});
        }
        
        //Atribuição a tabela
        tabTable.setModel(m);
        
        //Não permitir que a ordem das colunas sejam alteradas
        tabTable.getTableHeader().setReorderingAllowed(false);
        
        //Organizar as linhas das colunas em Ordem Alfabética
        tabTable.setAutoCreateRowSorter(false);
        
        //Centralizando os valores das células
        TableCellRenderer cell = new TableCellRenderer();
        cell.setCellCenter(tabTable);
        
        //Desabilitando a tabela
        //tabTable.setEnabled(false);
        
        //Cabeçalho de Coluna
        JTable rowTable = new RowNumberTable(tabTable);
        spScrollPane.setRowHeaderView(rowTable);
        spScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER,
                rowTable.getTableHeader());
        
        //Cabeçalho da tabela
        tabTable.getTableHeader().setDefaultRenderer(new DefaultTableHeaderCellRenderer());        
        
    }
    
    /**
     * Configurando a Tabela solução
     */
    private void configTableSol(JTable tabTable){
        
        DefaultTableModel m = new DefaultTableModel();
        
        //Colunas
        m.addColumn("");
        m.addColumn("");
        m.addColumn("");
        m.addColumn("");
        
        //Populando a tabela
        for (int i = 0; i < 4; i++) {
            m.addRow(new Object[]{0, 0, 0, 0, 0});
        }
        
        //Atribuição a tabela
        tabTable.setModel(m);
        
        //Não permitir que a ordem das colunas sejam alteradas
        tabTable.getTableHeader().setReorderingAllowed(false);
        
        //Organizar as linhas das colunas em Ordem Alfabética
        tabTable.setAutoCreateRowSorter(false);
        
        //Centralizando os valores das células
        TableCellRenderer cell = new TableCellRenderer();
        cell.setCellCenter(tabTable);
        
        //Desabilitando a tabela
        tabTable.setEnabled(false);
        
    }
    
    /**
     * Configurando a Tabela Final de Solução
     */
    private void configTableRes(JTable tabTable){
        
        DefaultTableModel m = new DefaultTableModel();
        
        //Colunas
        m.addColumn("Coordenada");
        m.addColumn("Valor");
        
        //Populando a tabela
        m.addRow(new Object[]{"X", 0});
        m.addRow(new Object[]{"Y", 0});
        m.addRow(new Object[]{"Z", 0});
        
        //Atribuição a tabela
        tabTable.setModel(m);
        
        //Não permitir que a ordem das colunas sejam alteradas
        tabTable.getTableHeader().setReorderingAllowed(false);
        
        //Organizar as linhas das colunas em Ordem Alfabética
        tabTable.setAutoCreateRowSorter(false);
        
        //Centralizando os valores das células
        TableCellRenderer cell = new TableCellRenderer();
        cell.setCellCenter(tabTable);
        
        //Desabilitando a tabela
        tabTable.setEnabled(false);
        
    }
    
    /**
     * Excluindo a linha selecionada na tabela
     */
    private void deleteRow(JTable table){
        //Chama a tabela já configurada
        DefaultTableModel t = (DefaultTableModel) table.getModel();
        
        try {
            
            if(linhaSelecionada > 0){
                //Removendo linha selecionada
                t.removeRow(linhaSelecionada);
                
            } else if(linhaSelecionada == 0){
                //Não pode deletar a primeira linha
                
                JOptionPane.showMessageDialog(rootPane,
                    String.format("Não é permitido a exclusão"
                  + "\n da primeira linha da tabela."), "Oops...",//Titulo
                    JOptionPane.WARNING_MESSAGE, null);
                
            }
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(rootPane,
                    String.format("Verifique de ter selecionado "
                  + "\n alguma linha da tabela."), "Oops...",//Titulo
                    JOptionPane.WARNING_MESSAGE, null);
            
        }
    }
    
    /**
     * Estado do botões
     */
    private void buttonControl(boolean e){
        cbIndex.setEnabled(e);
        /**
         * Isso irá evitar que o usuário selecione uma linha que já foi apagada
         * ou que não existe, assim evitando o mal uso da aplicação.
         */
    }
    
    private void configCombo(JComboBox cb, int size){
        //Criando um novo modelo de ComboBox
        DefaultComboBoxModel cm = new DefaultComboBoxModel();
        
        //Verificando a quantidade de linhas da tabela DH + a solução final (por isso o <=)        
        //Adicionando as linhas na ComboBox
        for (int i = 0; i <= size; i++) {
            if(i == size){
                cm.addElement("Final");
            }else{
               cm.addElement(i); 
            }
            
        }
        
        //Setando o modelo
        cb.setModel(cm);
        
        //Selecionando o último item
        cb.setSelectedIndex(size);
    }
}
